---
title: Using new Routers API
order: 4
layout: page
---

= Using New Router API

In Beverage Buddy, we are using a new annotation based routing API instead of the imperative one. The following contents will take it as an example.

== Defining the routes with @Route
In the new routing API, different routes are defined with adding a short annotation at the beginning of your code. let's take Beverage Buddy as an example.
[source, java]
--------------
@Route(value = "", layout = MainLayout.class)
public class ReviewsList extends PolymerTemplate<ReviewsModel> {
}
--------------
[source, java]
--------------
@Route(value = "categories", layout = MainLayout.class)
public final class CategoriesList extends VerticalLayout {
}
--------------

Here, we have two views, `reviews view` and `categories view`. As you notice, the value for `reviews view` is set with empty string, which means `reviews view` is the *default* route target for this application.

[NOTE]
`*MainLayout.class*` is used as a parent layout here, in order to do this, be sure that it has been implemented `RouterLayout` interface.

For more about this content, you can find *https://github.com/vaadin/flow/blob/master/flow-documentation/routing/tutorial-routing-annotation.asciidoc[here^]*.

== Navigating between routes
After defining the routes, you can use `RouterLink` to create the links in `MainLayout`.
[source, java]
--------------
RouterLink reviews = new RouterLink("Reviews List", ReviewsList.class);
RouterLink categories = new RouterLink("Categories List", CategoriesList.class);
--------------
[TIP]
You can also add URL parameter in the `RouterLink` component. For more information, you can find *https://github.com/vaadin/flow/blob/master/flow-documentation/routing/tutorial-routing-navigation.asciidoc[here^]*.

== Differences to imperative router API
At the end, I'd like to summarize a few differences between the two router APIs.

* Servlet needs to be set manually in imperative router API, while it is registered automatically in annotation based Router API as long as it satisfies the following conditions: 
  . At least one class annotated with @Route is found on the classpath;
  . No servlet is registered in a separate file;
  . No Vaadin servlet is registered.

* The interface used in imperative router API is `hasChildView` and `View`, while, in annotation based router API, you need `RouterLayout` interface in the parent layout only.   

* With imperative router API, you need to define the default view with a separate `RouterConfiguration`, while in the annotation based router API, you just need to declare with `@Route` and set `value` property to an empty string.

For more about the new routing and Navigation, you can find *https://github.com/vaadin/flow/blob/master/flow-documentation/Overview.asciidoc[here^]*.


