---
title: Integrating a Web Component
order: 1
layout: page
---

ifdef::env-github[:outfilesuffix: .asciidoc]
= Integrating a Web Component

This document describes the implementation of the `PaperToast` web component.
This is a Polymer web component which can be imported into our project by wrapping
it into a Java class.

== Basic Setup

We decided to import https://elements.polymer-project.org/elements/paper-toast[`<paper-toast>`] into our project.
In our case, all of the needed configuration for pulling in web components is already present in our project skeleton, so the only change we need is to add a new dependency to `bower.json`:
[source,json]
----
  "dependencies": {
    "polymer": "~2.0.2",
    "paper-toast": "~2.0.0",
    ...
  }
----

For reference, the detailed steps of the process are described in
https://github.com/vaadin/flow/blob/master/flow-documentation/web-components/tutorial-webcomponent-basic.asciidoc[Basic Integration of a Polymer Web Component]. 

== Class Definition

Our initial `PaperToast` class is defined as
[source,java]
----
@Tag("paper-toast")
@HtmlImport("frontend://bower_components/paper-toast/paper-toast.html")
public class PaperToast extends Component implements HasStyle {
    public PaperToast() {
    }
}
----

It has `@Tag` and `@HtmlImport` annotations to tie it to the web component source, and not much else. Implementing `HasStyle` is not necessary for the integration per se; it just adds the styling API to the component, making it easier to use.

== Supporting Properties

Next, we need to add support for the various properties of this component. `<paper-toast>` has the following core https://www.webcomponents.org/element/PolymerElements/paper-toast/elements/paper-toast#properties[properties]:

* duration
* text

Supporting a property is as easy as adding a getter/setter pair for it:

[source,java]
----
    public void setText(String text) {
        getElement().setProperty("text", text);
    }

    public String getText() {
        return getElement().getProperty("text", "");
    }

----

On top of the above, it is useful to similarly support a few more properties in order
to make our component more customisable:

* color
* backgroundColor
* horizontalAlign
* verticalAlign
* noAutoFocus
* noCancelOnOutsideClick

For more details, see the tutorial
https://github.com/vaadin/flow/blob/master/flow-documentation/web-components/tutorial-webcomponent-attributes-and-properties.asciidoc[Using Attributes and Properties with a Polymer Web Component].

== Adding Behaviour

We also need methods to actually show and hide the component. These simply
call the corresponding functions on the underlying element:

[source,java]
----
    public void show() {
        getElement().callFunction("open");
    }

    public void show(String text) {
        getElement().callFunction("show", text);
    }

    public void show(String text, int duration) {
        setDuration(duration);
        show(text);
    }

    public void hide() {
        getElement().callFunction("hide");
    }
----

[NOTE]
`show()` is overloaded to make the component easier to use.

== Handling Events

`<paper-toast>` supports an event called `iron-announce`. We define the following event class to represent it:
[source,java]
----
@DomEvent("iron-announce")
public class IronAnnounceEvent extends ComponentEvent<PaperToast> {
    public IronAnnounceEvent(PaperToast source, boolean fromClient) {
        super(source, fromClient);
    }
}
----

And a method is added to `PaperToast` to register listeners to this event:

[source,java]
----
    public Registration addIronAnnounceListener(
            ComponentEventListener<IronAnnounceEvent> ironAnnounceListener) {
        return super.addListener(IronAnnounceEvent.class, ironAnnounceListener);
    }
----

For more details, see the tutorial
https://github.com/vaadin/flow/blob/master/flow-documentation/web-components/tutorial-webcomponent-events.asciidoc[Using Events with a Polymer Web Component].

== Using the Component

All this makes using `PaperToast` from Java as simple as

[source,java]
----
    PaperToast notification = new PaperToast();
    notification.setColor("yellow");
    notification.setBackgroundColor("blue");
    notification.setNoCancelOnOutsideClick(false);

    notification.show("Category successfully deleted", 5000);
----
