ReviewsList-Doc
---------------
ReviewsList is a *https://github.com/vaadin/flow/blob/master/flow-documentation/polymer-templates/tutorial-template-basic.asciidoc/[PolymerTemplate^]* based view class. In this class, the list of reviews will be shown under a "search" bar and "add a new review" button.
image:ReviewsList.png[alt="Reviews List"]

The following content will introduce some concepts which are used in ``ReviewsList.java`` file.

Annotations
~~~~~~~~~~~
'''
@Convert
^^^^^^^^
There are two data types (``LocalDate``,``Long``) in our case which are not supported to use in the PolymerTemplate model directly, so that we need to use ``@Convert`` annotation:
[source, java]
--------------
@Convert(value = LongToStringConverter.class, path = "id")
@Convert(value = LongToStringConverter.class, path = "reviewCategory.categoryId")
@Convert(value = LocalDateToStringConverter.class, path = "testDate")
--------------
More about *https://github.com/vaadin/flow/blob/master/flow-documentation/polymer-templates/tutorial-template-model-converters.asciidoc["Using Model Converters with a PolymerTemplate Model"^]*

@Id
^^^
When you need to add web components into the PolymerTemplates, you can use the ``Component`` or ``Element`` API.

As in the view of reviews list, we need to use a few buttons for adding and editing the reviews, while a search textfield is added too. In this case, we add the needed components in the HTML template file with the corresponding identifiers. Then the ``@Id`` annotation in java file maps the components to the elements in the `HTML template`.
[source, java]
--------------
@Id("filterText")
private TextField filterText;
@Id("addReview")
private Button addReview;
--------------
More about *https://github.com/vaadin/flow/blob/master/flow-documentation/polymer-templates/tutorial-template-components.asciidoc[Binding Components from a PolymerTemplate^]*

@EventHandler
^^^^^^^^^^^^^
As we can see from the preview of reviews list, at the end of each reviews, there is an edit button for users to edit the existed review. To handle the click event from each button, we need to create a separated method with the event name, annotated with `@EventHandler`.
[source, java]
--------------
@EventHandler
private void edit(@ModelItem Review review) {
   reviewForm.openReview(Optional.of(review));
}
--------------
More about *https://github.com/vaadin/flow/blob/master/flow-documentation/polymer-templates/tutorial-template-event-handlers.asciidoc#server-side-event-handlers[Handling Users Events in PolymerTemplate-Serverside^]*

Attach Child Elements
~~~~~~~~~~~~~~~~~~~~~
'''
Under the view of review list in "Beverage Buddy", after clicks any button, we will show the user a form to either add or edit the review. As the form is a separated element for the PolymerTemplate, we need to connect them together beforehand, so that we can achieve the goal we want.

Flow allows Java code to control the Document Object Model (DOM) in the user's browser and the DOM tree is built up from element instances. After understand the element hierarchy, the form can be attached to reviews list as a child element via using the following code:
[source, java]
--------------
@Override
protected void onAttach(AttachEvent attachEvent) {
    getElement().getParent().appendChild(reviewForm.getElement());
}
--------------
More about this content, you can find https://github.com/vaadin/flow/blob/master/flow-documentation/Overview.asciidoc#server-side-dom-tree[here^].

