<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.vaadin.starter</groupId>
    <artifactId>beveragebuddy</artifactId>
    <name>Beverage Buddy App Starter for Vaadin Flow</name>
    <version>2.0-SNAPSHOT</version>
    <packaging>war</packaging>

    <properties>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <failOnMissingWebXml>false</failOnMissingWebXml>

        <vaadin.version>13.0-SNAPSHOT</vaadin.version>
    </properties>

    <repositories>
        <!-- Repository used by many Vaadin add-ons -->
        <repository>
            <id>Vaadin Directory</id>
            <url>http://maven.vaadin.com/vaadin-addons</url>
        </repository>
        <!-- Repository needed for the prerelease versions of Vaadin -->
        <repository>
            <id>vaadin-prereleases</id>
            <url>https://maven.vaadin.com/vaadin-prereleases</url>
        </repository>
        <!-- Repository needed for the snapshot versions of Vaadin -->
        <repository>
            <id>vaadin-snapshots</id>
            <url>https://oss.sonatype.org/content/repositories/vaadin-snapshots/</url>
        </repository>
    </repositories>

    <pluginRepositories>
        <!-- Repository needed for the prerelease versions of Vaadin -->
        <pluginRepository>
            <id>vaadin-prereleases</id>
            <url>https://maven.vaadin.com/vaadin-prereleases</url>
        </pluginRepository>
        <!-- Repository needed for the snapshot versions of Vaadin -->
        <pluginRepository>
            <id>vaadin-snapshots</id>
            <url>https://oss.sonatype.org/content/repositories/vaadin-snapshots/</url>
        </pluginRepository>
    </pluginRepositories>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>com.vaadin</groupId>
                <artifactId>vaadin-bom</artifactId>
                <type>pom</type>
                <scope>import</scope>
                <version>${vaadin.version}</version>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <dependencies>
        <dependency>
            <groupId>com.vaadin</groupId>
            <artifactId>vaadin-core</artifactId>
        </dependency>
        <dependency>
            <groupId>com.vaadin</groupId>
            <artifactId>flow-server</artifactId>
            <version>2.0-SNAPSHOT</version>
        </dependency>
        <dependency>
            <groupId>com.vaadin</groupId>
            <artifactId>flow-client</artifactId>
            <version>2.0-SNAPSHOT</version>
        </dependency>
        <dependency>
            <groupId>com.vaadin</groupId>
            <artifactId>flow-data</artifactId>
            <version>2.0-SNAPSHOT</version>
        </dependency>
        <!-- Added to provide logging output as Flow uses -->
        <!-- the unbound SLF4J no-operation (NOP) logger implementation -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-simple</artifactId>
        </dependency>

        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>javax.servlet-api</artifactId>
            <version>3.1.0</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>commons-beanutils</groupId>
            <artifactId>commons-beanutils</artifactId>
            <version>1.9.2</version>
            <type>jar</type>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.eclipse.jetty</groupId>
                <artifactId>jetty-maven-plugin</artifactId>
                <version>9.4.15.v20190215</version>
                <configuration>
                    <scanIntervalSeconds>5</scanIntervalSeconds>
                </configuration>
            </plugin>
        </plugins>
    </build>

    <profiles>
        <profile>
            <!-- Production mode can be activated with either property or profile -->
            <id>production-mode</id>
            <activation>
                <property>
                    <name>vaadin.productionMode</name>
                </property>
            </activation>

            <properties>
                <vaadin.productionMode>true</vaadin.productionMode>
            </properties>

            <dependencies>
                <dependency>
                    <groupId>com.vaadin</groupId>
                    <artifactId>flow-server-production-mode</artifactId>
                </dependency>
            </dependencies>

            <build>
                <plugins>
                    <!--
                        Run flow tasks for production. They already take care
                        when to executed based on the `vaadin.bowerMode` flag
                    -->
                    <plugin>
                        <groupId>com.vaadin</groupId>
                        <artifactId>flow-maven-plugin</artifactId>
                        <version>2.0-SNAPSHOT</version>
                        <executions>
                            <execution>
                                <goals>
                                    <goal>copy-production-files</goal>
                                    <goal>package-for-production</goal>
                                    <goal>update-npm-dependencies</goal>
                                    <goal>update-imports</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <profile>
            <id>npm-mode</id>
            <activation>
                <property>
                    <name>!vaadin.bowerMode</name>
                </property>
            </activation>
            <build>
                <plugins>
                    <!--
                        Take care of synchronizing java dependencies and imports in
                        package.json and main.js files.
                        It also creates webpack.config.js if not exists yet.
                    -->
                    <plugin>
                        <groupId>com.vaadin</groupId>
                        <artifactId>flow-maven-plugin</artifactId>
                        <version>2.0-SNAPSHOT</version>
                        <executions>
                            <execution>
                                <goals>
                                    <goal>update-npm-dependencies</goal>
                                    <goal>update-imports</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>

                    <!--
                        Remove stuff generated by the flow-maven-plugin
                    -->
                    <plugin>
                        <artifactId>maven-clean-plugin</artifactId>
                        <configuration>
                            <filesets>
                                <fileset>
                                    <directory>${project.basedir}</directory>
                                    <includes>
                                        <include>frontend/main.js</include>
                                        <include>package*.json</include>
                                        <include>webpack.config.js</include>
                                    </includes>
                                </fileset>
                            </filesets>
                        </configuration>
                    </plugin>

                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>exec-maven-plugin</artifactId>
                        <version>1.6.0</version>
                        <executions>
                            <!--
                                Run webpack just before packaging
                            -->
                           <execution>
                               <id>run-webpack</id>
                                <phase>prepare-package</phase>
                                <goals><goal>exec</goal></goals>
                                <configuration>
                                    <executable>node</executable>
                                    <arguments>
                                        <argument>node_modules/.bin/webpack</argument>
                                    </arguments>
                                </configuration>
                            </execution>
                            <!--
                                Execute fizzed-watcher asynchronously so that whenever a java
                                file changes, it'll run `mvn compile` to recompile the project.
                                Should be not run in production, but maven profiles does not
                                support multiple property conditions.
                            -->
                            <execution>
                               <id>run-watcher</id>
                                <phase>test-compile</phase>
                                <goals><goal>exec</goal></goals>
                                <configuration>
                                    <executable>mvn</executable>
                                    <arguments>
                                        <argument>fizzed-watcher:run</argument>
                                    </arguments>
                                    <async>true</async>
                                    <asyncDestroyOnShutdown>true</asyncDestroyOnShutdown>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>

                    <!--
                        Watch for the source file changes and recompile the Java classes.
                        This allows to update npm packages and thus webpack bundle.
                        Keep in mind that the watcher plugin should be started separately,
                        since it's a separate project, use `mvn fizzed-watcher:run` or
                        `./mvnw fizzed-watcher:run` to run it from Maven or use the npm
                        script that starts it automatically
                    -->
                    <plugin>
                        <groupId>com.fizzed</groupId>
                        <artifactId>fizzed-watcher-maven-plugin</artifactId>
                        <version>1.0.6</version>
                        <configuration>
                            <watches>
                                <watch>
                                    <directory>src/main/java</directory>
                                </watch>
                            </watches>
                            <goals>
                                <goal>compile</goal>
                            </goals>
                        </configuration>
                    </plugin>

                    <!--
                        In npmMode we need to change frontend folder to the generated
                    -->
                    <plugin>
                        <groupId>org.eclipse.jetty</groupId>
                        <artifactId>jetty-maven-plugin</artifactId>
                        <version>9.4.15.v20190215</version>
                        <configuration>
                            <!-- Folder where webpack copies static stuff and generates frontend compiled bundles -->
                            <webAppSourceDirectory>${project.build.directory}/generated-frontend</webAppSourceDirectory>
                            <scanIntervalSeconds>5</scanIntervalSeconds>
                        </configuration>
                    </plugin>

                    <!--
                        Copy webpack compiled stuff to final distributable
                    -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-war-plugin</artifactId>
                        <version>3.2.2</version>
                        <configuration>
                            <webResources>
                                <resource>
                                    <directory>${project.build.directory}/generated-frontend</directory>
                                </resource>
                            </webResources>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>

    </profiles>
</project>
